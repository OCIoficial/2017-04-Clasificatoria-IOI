# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`

###############################################################################

# J = 2

[Subtask 1]
  # Use sample data as test
  1 ; copy statement/sample-1.in
  1 ; copy statement/sample-2.in

  # Random tests
  2 ; random_gen.py 2 9
  2 ; random_gen.py 2 9
  2 ; pairwise.py 2 9
  2 ; pairwise.py 2 9
  2 ; no_ties.py 2 9
  2 ; no_ties.py 2 9
  2 ; mostly_ties.py 2 9
  2 ; mostly_ties.py 2 9


# J = 3

[Subtask 2]
  # Random tests
  3 ; random_gen.py 3 9
  3 ; random_gen.py 3 9
  3 ; pairwise.py 3 9
  3 ; pairwise.py 3 9
  3 ; triplets.py 3 9
  3 ; triplets.py 3 9
  3 ; no_ties.py 3 9
  3 ; no_ties.py 3 9
  3 ; mostly_ties.py 3 9
  3 ; mostly_ties.py 3 9
  3 ; connected_graphs_anti_greedy.py 3 9
  3 ; connected_graphs_anti_greedy.py 3 9

# Q < 10

[Subtask 3]
  4 ; random_gen.py 10 9
  4 ; random_gen.py 100 9
  4 ; random_gen.py 1000 9
  4 ; random_gen.py 10000 9
  4 ; random_gen.py 100000 9
  4 ; pairwise.py 10 9
  4 ; pairwise.py 100 9
  4 ; pairwise.py 1000 9
  4 ; pairwise.py 10000 9
  4 ; pairwise.py 100000 9
  4 ; triplets.py 10 9
  4 ; triplets.py 100 9
  4 ; triplets.py 1000 9
  4 ; triplets.py 10000 9
  4 ; triplets.py 100000 9
  4 ; no_ties.py 10 9
  4 ; no_ties.py 100 9
  4 ; no_ties.py 1000 9
  4 ; no_ties.py 10000 9
  4 ; no_ties.py 100000 9
  4 ; mostly_ties.py 10 9
  4 ; mostly_ties.py 100 9
  4 ; mostly_ties.py 1000 9
  4 ; mostly_ties.py 10000 9
  4 ; mostly_ties.py 100000 9
  4 ; connected_graphs_anti_greedy.py 10 9
  4 ; connected_graphs_anti_greedy.py 100 9
  4 ; connected_graphs_anti_greedy.py 1000 9
  4 ; connected_graphs_anti_greedy.py 10000 9
  4 ; connected_graphs_anti_greedy.py 100000 9

# Sin restricciones

[Subtask 4]

  5 ; random_gen.py 10 10
  5 ; random_gen.py 10 100
  5 ; random_gen.py 10 1000
  5 ; random_gen.py 100 100
  5 ; random_gen.py 1000 1000
  5 ; random_gen.py 1000 10000
  5 ; random_gen.py 1000 100000
  5 ; random_gen.py 10000 10000
  5 ; random_gen.py 100000 100000
  5 ; pairwise.py 10 10
  5 ; pairwise.py 10 100
  5 ; pairwise.py 10 1000
  5 ; pairwise.py 100 100
  5 ; pairwise.py 1000 1000
  5 ; pairwise.py 1000 10000
  5 ; pairwise.py 1000 100000
  5 ; pairwise.py 10000 10000
  5 ; pairwise.py 100000 100000
  5 ; triplets.py 10 10
  5 ; triplets.py 10 100
  5 ; triplets.py 10 1000
  5 ; triplets.py 100 100
  5 ; triplets.py 1000 1000
  5 ; triplets.py 1000 10000
  5 ; triplets.py 1000 100000
  5 ; triplets.py 10000 10000
  5 ; triplets.py 100000 100000
  5 ; no_ties.py 10 10
  5 ; no_ties.py 10 100
  5 ; no_ties.py 10 1000
  5 ; no_ties.py 100 100
  5 ; no_ties.py 1000 1000
  5 ; no_ties.py 1000 10000
  5 ; no_ties.py 1000 100000
  5 ; no_ties.py 10000 10000
  5 ; no_ties.py 100000 100000
  5 ; mostly_ties.py 10 10
  5 ; mostly_ties.py 10 100
  5 ; mostly_ties.py 10 1000
  5 ; mostly_ties.py 100 100
  5 ; mostly_ties.py 1000 1000
  5 ; mostly_ties.py 1000 10000
  5 ; mostly_ties.py 1000 100000
  5 ; mostly_ties.py 10000 10000
  5 ; mostly_ties.py 100000 100000
  5 ; connected_graphs_anti_greedy.py 10 10
  5 ; connected_graphs_anti_greedy.py 10 100
  5 ; connected_graphs_anti_greedy.py 10 1000
  5 ; connected_graphs_anti_greedy.py 100 100
  5 ; connected_graphs_anti_greedy.py 1000 1000
  5 ; connected_graphs_anti_greedy.py 1000 10000
  5 ; connected_graphs_anti_greedy.py 1000 100000
  5 ; connected_graphs_anti_greedy.py 10000 10000
  5 ; connected_graphs_anti_greedy.py 100000 100000
