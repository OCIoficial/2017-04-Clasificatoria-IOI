# This is a sample test plan.
# Every line specifies a command to generate a test case.
# The first column specifies a group name.
# The second column specifies a command to generate the test case, it could be
# either a `copy` command or a generator with its respective arguments.
# A `copy` command expects a path to a file relatively to the task root.
# A generator could be a source file in Java, C++ or Python, which is compiled
# and executed with the specified arguments.
# Additionally, an argument which is different for every test case, is passed
# at the beginning. Arguments should be used to generate a uniquely random seed
# inside the generator.
# To generate test cases using test plan use `ocimatic gen-input`


[Subtask 1 - attic/validators/st1.cpp]
  s ; copy statement/sample-1.in

  g ; generator.py 100 1 0 2
  g ; generator.py 100 1 0 2


[Subtask 2 - attic/validators/st2.cpp]
  g ; generator.py 100 2 0 4
  g ; generator.py 100 2 0 4


[Subtask 3 - attic/validators/st3.cpp]
  g ; generator.py 1000 1 1 4
  g ; generator.py 1000 1 1 4


[Subtask 4 - attic/validators/st4.cpp]
  s ; copy statement/sample-2.in
  g ; generator.py 1000 2 1 4
  g ; generator.py 1000 2 2 4
  g ; generator.py 1000 2 4 4
  g ; generator.py 1000 3 5 4

